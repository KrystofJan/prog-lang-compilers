//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/school/pjp/project/PLC_Lab7/Compiler/Patter.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPatterListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PatterBaseListener : IPatterListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>sem</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSem([NotNull] PatterParser.SemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>sem</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSem([NotNull] PatterParser.SemContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>decl</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecl([NotNull] PatterParser.DeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>decl</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecl([NotNull] PatterParser.DeclContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExp([NotNull] PatterParser.ExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExp([NotNull] PatterParser.ExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>rd</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRd([NotNull] PatterParser.RdContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>rd</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRd([NotNull] PatterParser.RdContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>wr</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWr([NotNull] PatterParser.WrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>wr</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWr([NotNull] PatterParser.WrContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>scoped</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScoped([NotNull] PatterParser.ScopedContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>scoped</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScoped([NotNull] PatterParser.ScopedContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ifstat</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfstat([NotNull] PatterParser.IfstatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifstat</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfstat([NotNull] PatterParser.IfstatContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>whilecyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhilecyc([NotNull] PatterParser.WhilecycContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whilecyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhilecyc([NotNull] PatterParser.WhilecycContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>forcyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForcyc([NotNull] PatterParser.ForcycContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forcyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForcyc([NotNull] PatterParser.ForcycContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>intDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntDtype([NotNull] PatterParser.IntDtypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>intDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntDtype([NotNull] PatterParser.IntDtypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>fltDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFltDtype([NotNull] PatterParser.FltDtypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fltDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFltDtype([NotNull] PatterParser.FltDtypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>bolDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBolDtype([NotNull] PatterParser.BolDtypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bolDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBolDtype([NotNull] PatterParser.BolDtypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>strDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStrDtype([NotNull] PatterParser.StrDtypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>strDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStrDtype([NotNull] PatterParser.StrDtypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprPrimary</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprPrimary([NotNull] PatterParser.ExprPrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPrimary</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprPrimary([NotNull] PatterParser.ExprPrimaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMin</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMin([NotNull] PatterParser.UnaryMinContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMin</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMin([NotNull] PatterParser.UnaryMinContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>unaryNeg</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryNeg([NotNull] PatterParser.UnaryNegContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryNeg</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryNeg([NotNull] PatterParser.UnaryNegContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMul([NotNull] PatterParser.ExprMulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMul([NotNull] PatterParser.ExprMulContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAdd([NotNull] PatterParser.ExprAddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAdd([NotNull] PatterParser.ExprAddContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprRl</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprRl([NotNull] PatterParser.ExprRlContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprRl</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprRl([NotNull] PatterParser.ExprRlContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCmp</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprCmp([NotNull] PatterParser.ExprCmpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCmp</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprCmp([NotNull] PatterParser.ExprCmpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAnd([NotNull] PatterParser.ExprAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAnd([NotNull] PatterParser.ExprAndContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprOr([NotNull] PatterParser.ExprOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprOr([NotNull] PatterParser.ExprOrContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTernar</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTernar([NotNull] PatterParser.ExprTernarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTernar</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTernar([NotNull] PatterParser.ExprTernarContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAss</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAss([NotNull] PatterParser.ExprAssContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAss</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAss([NotNull] PatterParser.ExprAssContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>primaryWrapped</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimaryWrapped([NotNull] PatterParser.PrimaryWrappedContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>primaryWrapped</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimaryWrapped([NotNull] PatterParser.PrimaryWrappedContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>primaryValues</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimaryValues([NotNull] PatterParser.PrimaryValuesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>primaryValues</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimaryValues([NotNull] PatterParser.PrimaryValuesContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>integerVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerVal([NotNull] PatterParser.IntegerValContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>integerVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerVal([NotNull] PatterParser.IntegerValContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>floatVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatVal([NotNull] PatterParser.FloatValContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>floatVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatVal([NotNull] PatterParser.FloatValContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>booleanVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanVal([NotNull] PatterParser.BooleanValContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanVal([NotNull] PatterParser.BooleanValContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>stringVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringVal([NotNull] PatterParser.StringValContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringVal([NotNull] PatterParser.StringValContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>identity</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentity([NotNull] PatterParser.IdentityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identity</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentity([NotNull] PatterParser.IdentityContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] PatterParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] PatterParser.ProgContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStat([NotNull] PatterParser.StatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStat([NotNull] PatterParser.StatContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.decleration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecleration([NotNull] PatterParser.DeclerationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.decleration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecleration([NotNull] PatterParser.DeclerationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDtype([NotNull] PatterParser.DtypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.dtype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDtype([NotNull] PatterParser.DtypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRead([NotNull] PatterParser.ReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRead([NotNull] PatterParser.ReadContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.write"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWrite([NotNull] PatterParser.WriteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.write"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWrite([NotNull] PatterParser.WriteContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.statwrap"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatwrap([NotNull] PatterParser.StatwrapContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.statwrap"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatwrap([NotNull] PatterParser.StatwrapContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf([NotNull] PatterParser.IfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf([NotNull] PatterParser.IfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.while"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile([NotNull] PatterParser.WhileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.while"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile([NotNull] PatterParser.WhileContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.for"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor([NotNull] PatterParser.ForContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.for"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor([NotNull] PatterParser.ForContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] PatterParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] PatterParser.ExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimary([NotNull] PatterParser.PrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.primary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimary([NotNull] PatterParser.PrimaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="PatterParser.statstatstatstatstatstatstatstatstatdtypedtypedtypedtypeexprexprexprexprexprexprexprexprexprexprexprprimaryprimaryvaluesvaluesvaluesvaluesvalues"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValues([NotNull] PatterParser.ValuesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="PatterParser.statstatstatstatstatstatstatstatstatdtypedtypedtypedtypeexprexprexprexprexprexprexprexprexprexprexprprimaryprimaryvaluesvaluesvaluesvaluesvalues"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValues([NotNull] PatterParser.ValuesContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Compiler
