//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/school/pjp/project/PLC_Lab7/Compiler/Patter.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PatterLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ID=17, 
		INT=18, BOOL=19, FLOAT=20, STRING=21, WS=22, COMMENT=23, ASSIGN=24, UN_MIN=25, 
		NEG_OP=26, CMP_LT=27, CMP_GT=28, ADD_OP=29, MIN_OP=30, CONCAT_OP=31, MUL_OP=32, 
		DIV_OP=33, MOD_OP=34, LOG_OR=35, LOG_AND=36, EQ=37, NEQ=38, QUES=39, COLON=40;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "ID", "INT", 
		"BOOL", "FLOAT", "STRING", "WS", "COMMENT", "ASSIGN", "UN_MIN", "NEG_OP", 
		"CMP_LT", "CMP_GT", "ADD_OP", "MIN_OP", "CONCAT_OP", "MUL_OP", "DIV_OP", 
		"MOD_OP", "LOG_OR", "LOG_AND", "EQ", "NEQ", "QUES", "COLON"
	};


	public PatterLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'int'", "'float'", "'bool'", "'string'", "'read'", 
		"'write'", "'{'", "'}'", "'if'", "'else'", "'while'", "'for'", "'('", 
		"')'", null, null, null, null, null, null, null, "'='", null, "'!'", "'<'", 
		"'>'", "'+'", null, "'.'", "'*'", "'/'", "'%'", "'||'", "'&&'", "'=='", 
		"'!='", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ID", "INT", "BOOL", "FLOAT", "STRING", 
		"WS", "COMMENT", "ASSIGN", "UN_MIN", "NEG_OP", "CMP_LT", "CMP_GT", "ADD_OP", 
		"MIN_OP", "CONCAT_OP", "MUL_OP", "DIV_OP", "MOD_OP", "LOG_OR", "LOG_AND", 
		"EQ", "NEQ", "QUES", "COLON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Patter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2*\x109\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\a\x12\x95\n\x12\f\x12\xE\x12\x98\v\x12\x3\x13\x3\x13\a\x13"+
		"\x9C\n\x13\f\x13\xE\x13\x9F\v\x13\x3\x13\x5\x13\xA2\n\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xAD\n\x14\x3"+
		"\x15\x3\x15\x3\x15\a\x15\xB2\n\x15\f\x15\xE\x15\xB5\v\x15\x3\x15\x3\x15"+
		"\a\x15\xB9\n\x15\f\x15\xE\x15\xBC\v\x15\x3\x15\x3\x15\a\x15\xC0\n\x15"+
		"\f\x15\xE\x15\xC3\v\x15\x5\x15\xC5\n\x15\x3\x16\x3\x16\a\x16\xC9\n\x16"+
		"\f\x16\xE\x16\xCC\v\x16\x3\x16\x3\x16\x3\x17\x6\x17\xD1\n\x17\r\x17\xE"+
		"\x17\xD2\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\xDB\n\x18\f\x18"+
		"\xE\x18\xDE\v\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3%\x3&\x3"+
		"&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3)\x3)\x3\xDC\x2\x2*\x3\x2\x3\x5\x2\x4\a"+
		"\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2"+
		"\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'"+
		"\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C"+
		"\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2"+
		"%I\x2&K\x2\'M\x2(O\x2)Q\x2*\x3\x2\b\x4\x2\x43\\\x63|\x6\x2\x32;\x43\\"+
		"\x61\x61\x63|\x3\x2\x33;\x3\x2\x32;\t\x2\"#\'@\x42]__\x61\x61\x63}\x7F"+
		"\x7F\x5\x2\v\f\xF\xF\"\"\x113\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a"+
		"\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2"+
		"\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2"+
		"\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2"+
		"\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2"+
		"/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2"+
		"\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2"+
		"\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2"+
		"\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2"+
		"O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x3S\x3\x2\x2\x2\x5U\x3\x2\x2\x2\aW\x3\x2"+
		"\x2\x2\t[\x3\x2\x2\x2\v\x61\x3\x2\x2\x2\r\x66\x3\x2\x2\x2\xFm\x3\x2\x2"+
		"\x2\x11r\x3\x2\x2\x2\x13x\x3\x2\x2\x2\x15z\x3\x2\x2\x2\x17|\x3\x2\x2\x2"+
		"\x19\x7F\x3\x2\x2\x2\x1B\x84\x3\x2\x2\x2\x1D\x8A\x3\x2\x2\x2\x1F\x8E\x3"+
		"\x2\x2\x2!\x90\x3\x2\x2\x2#\x92\x3\x2\x2\x2%\xA1\x3\x2\x2\x2\'\xAC\x3"+
		"\x2\x2\x2)\xC4\x3\x2\x2\x2+\xC6\x3\x2\x2\x2-\xD0\x3\x2\x2\x2/\xD6\x3\x2"+
		"\x2\x2\x31\xE3\x3\x2\x2\x2\x33\xE5\x3\x2\x2\x2\x35\xE7\x3\x2\x2\x2\x37"+
		"\xE9\x3\x2\x2\x2\x39\xEB\x3\x2\x2\x2;\xED\x3\x2\x2\x2=\xEF\x3\x2\x2\x2"+
		"?\xF1\x3\x2\x2\x2\x41\xF3\x3\x2\x2\x2\x43\xF5\x3\x2\x2\x2\x45\xF7\x3\x2"+
		"\x2\x2G\xF9\x3\x2\x2\x2I\xFC\x3\x2\x2\x2K\xFF\x3\x2\x2\x2M\x102\x3\x2"+
		"\x2\x2O\x105\x3\x2\x2\x2Q\x107\x3\x2\x2\x2ST\a=\x2\x2T\x4\x3\x2\x2\x2"+
		"UV\a.\x2\x2V\x6\x3\x2\x2\x2WX\ak\x2\x2XY\ap\x2\x2YZ\av\x2\x2Z\b\x3\x2"+
		"\x2\x2[\\\ah\x2\x2\\]\an\x2\x2]^\aq\x2\x2^_\a\x63\x2\x2_`\av\x2\x2`\n"+
		"\x3\x2\x2\x2\x61\x62\a\x64\x2\x2\x62\x63\aq\x2\x2\x63\x64\aq\x2\x2\x64"+
		"\x65\an\x2\x2\x65\f\x3\x2\x2\x2\x66g\au\x2\x2gh\av\x2\x2hi\at\x2\x2ij"+
		"\ak\x2\x2jk\ap\x2\x2kl\ai\x2\x2l\xE\x3\x2\x2\x2mn\at\x2\x2no\ag\x2\x2"+
		"op\a\x63\x2\x2pq\a\x66\x2\x2q\x10\x3\x2\x2\x2rs\ay\x2\x2st\at\x2\x2tu"+
		"\ak\x2\x2uv\av\x2\x2vw\ag\x2\x2w\x12\x3\x2\x2\x2xy\a}\x2\x2y\x14\x3\x2"+
		"\x2\x2z{\a\x7F\x2\x2{\x16\x3\x2\x2\x2|}\ak\x2\x2}~\ah\x2\x2~\x18\x3\x2"+
		"\x2\x2\x7F\x80\ag\x2\x2\x80\x81\an\x2\x2\x81\x82\au\x2\x2\x82\x83\ag\x2"+
		"\x2\x83\x1A\x3\x2\x2\x2\x84\x85\ay\x2\x2\x85\x86\aj\x2\x2\x86\x87\ak\x2"+
		"\x2\x87\x88\an\x2\x2\x88\x89\ag\x2\x2\x89\x1C\x3\x2\x2\x2\x8A\x8B\ah\x2"+
		"\x2\x8B\x8C\aq\x2\x2\x8C\x8D\at\x2\x2\x8D\x1E\x3\x2\x2\x2\x8E\x8F\a*\x2"+
		"\x2\x8F \x3\x2\x2\x2\x90\x91\a+\x2\x2\x91\"\x3\x2\x2\x2\x92\x96\t\x2\x2"+
		"\x2\x93\x95\t\x3\x2\x2\x94\x93\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2\x96\x94"+
		"\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97$\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2"+
		"\x99\x9D\t\x4\x2\x2\x9A\x9C\t\x5\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9F\x3"+
		"\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA2\x3\x2\x2\x2"+
		"\x9F\x9D\x3\x2\x2\x2\xA0\xA2\a\x32\x2\x2\xA1\x99\x3\x2\x2\x2\xA1\xA0\x3"+
		"\x2\x2\x2\xA2&\x3\x2\x2\x2\xA3\xA4\av\x2\x2\xA4\xA5\at\x2\x2\xA5\xA6\a"+
		"w\x2\x2\xA6\xAD\ag\x2\x2\xA7\xA8\ah\x2\x2\xA8\xA9\a\x63\x2\x2\xA9\xAA"+
		"\an\x2\x2\xAA\xAB\au\x2\x2\xAB\xAD\ag\x2\x2\xAC\xA3\x3\x2\x2\x2\xAC\xA7"+
		"\x3\x2\x2\x2\xAD(\x3\x2\x2\x2\xAE\xAF\t\x5\x2\x2\xAF\xB3\a\x30\x2\x2\xB0"+
		"\xB2\t\x5\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2"+
		"\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xC5\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6"+
		"\xBA\t\x4\x2\x2\xB7\xB9\t\x5\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\xBC\x3\x2\x2"+
		"\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBD\x3\x2\x2\x2\xBC\xBA"+
		"\x3\x2\x2\x2\xBD\xC1\a\x30\x2\x2\xBE\xC0\t\x5\x2\x2\xBF\xBE\x3\x2\x2\x2"+
		"\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC5\x3"+
		"\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xAE\x3\x2\x2\x2\xC4\xB6\x3\x2\x2\x2"+
		"\xC5*\x3\x2\x2\x2\xC6\xCA\a$\x2\x2\xC7\xC9\t\x6\x2\x2\xC8\xC7\x3\x2\x2"+
		"\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCD"+
		"\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xCE\a$\x2\x2\xCE,\x3\x2\x2\x2\xCF"+
		"\xD1\t\a\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD0\x3\x2\x2"+
		"\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\b\x17\x2\x2\xD5.\x3"+
		"\x2\x2\x2\xD6\xD7\a\x31\x2\x2\xD7\xD8\a\x31\x2\x2\xD8\xDC\x3\x2\x2\x2"+
		"\xD9\xDB\v\x2\x2\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDD\x3"+
		"\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2"+
		"\xDF\xE0\a\f\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\b\x18\x2\x2\xE2\x30\x3"+
		"\x2\x2\x2\xE3\xE4\a?\x2\x2\xE4\x32\x3\x2\x2\x2\xE5\xE6\a/\x2\x2\xE6\x34"+
		"\x3\x2\x2\x2\xE7\xE8\a#\x2\x2\xE8\x36\x3\x2\x2\x2\xE9\xEA\a>\x2\x2\xEA"+
		"\x38\x3\x2\x2\x2\xEB\xEC\a@\x2\x2\xEC:\x3\x2\x2\x2\xED\xEE\a-\x2\x2\xEE"+
		"<\x3\x2\x2\x2\xEF\xF0\a/\x2\x2\xF0>\x3\x2\x2\x2\xF1\xF2\a\x30\x2\x2\xF2"+
		"@\x3\x2\x2\x2\xF3\xF4\a,\x2\x2\xF4\x42\x3\x2\x2\x2\xF5\xF6\a\x31\x2\x2"+
		"\xF6\x44\x3\x2\x2\x2\xF7\xF8\a\'\x2\x2\xF8\x46\x3\x2\x2\x2\xF9\xFA\a~"+
		"\x2\x2\xFA\xFB\a~\x2\x2\xFBH\x3\x2\x2\x2\xFC\xFD\a(\x2\x2\xFD\xFE\a(\x2"+
		"\x2\xFEJ\x3\x2\x2\x2\xFF\x100\a?\x2\x2\x100\x101\a?\x2\x2\x101L\x3\x2"+
		"\x2\x2\x102\x103\a#\x2\x2\x103\x104\a?\x2\x2\x104N\x3\x2\x2\x2\x105\x106"+
		"\a\x41\x2\x2\x106P\x3\x2\x2\x2\x107\x108\a<\x2\x2\x108R\x3\x2\x2\x2\xE"+
		"\x2\x96\x9D\xA1\xAC\xB3\xBA\xC1\xC4\xCA\xD2\xDC\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compiler
