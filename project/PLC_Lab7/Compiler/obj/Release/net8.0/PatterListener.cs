//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/school/pjp/project/PLC_Lab7/Compiler/Patter.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PatterParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IPatterListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>sem</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSem([NotNull] PatterParser.SemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>sem</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSem([NotNull] PatterParser.SemContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>decl</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecl([NotNull] PatterParser.DeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>decl</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecl([NotNull] PatterParser.DeclContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExp([NotNull] PatterParser.ExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExp([NotNull] PatterParser.ExpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>rd</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRd([NotNull] PatterParser.RdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>rd</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRd([NotNull] PatterParser.RdContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>wr</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWr([NotNull] PatterParser.WrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>wr</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWr([NotNull] PatterParser.WrContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>scoped</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScoped([NotNull] PatterParser.ScopedContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>scoped</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScoped([NotNull] PatterParser.ScopedContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ifstat</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfstat([NotNull] PatterParser.IfstatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifstat</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfstat([NotNull] PatterParser.IfstatContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>whilecyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhilecyc([NotNull] PatterParser.WhilecycContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whilecyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhilecyc([NotNull] PatterParser.WhilecycContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>forcyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForcyc([NotNull] PatterParser.ForcycContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forcyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForcyc([NotNull] PatterParser.ForcycContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>intDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDtype([NotNull] PatterParser.IntDtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDtype([NotNull] PatterParser.IntDtypeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>fltDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFltDtype([NotNull] PatterParser.FltDtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>fltDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFltDtype([NotNull] PatterParser.FltDtypeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>bolDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBolDtype([NotNull] PatterParser.BolDtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bolDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBolDtype([NotNull] PatterParser.BolDtypeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>strDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStrDtype([NotNull] PatterParser.StrDtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>strDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStrDtype([NotNull] PatterParser.StrDtypeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprPrimary</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprPrimary([NotNull] PatterParser.ExprPrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPrimary</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprPrimary([NotNull] PatterParser.ExprPrimaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMin</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMin([NotNull] PatterParser.UnaryMinContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMin</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMin([NotNull] PatterParser.UnaryMinContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>unaryNeg</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryNeg([NotNull] PatterParser.UnaryNegContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryNeg</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryNeg([NotNull] PatterParser.UnaryNegContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMul([NotNull] PatterParser.ExprMulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMul([NotNull] PatterParser.ExprMulContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAdd([NotNull] PatterParser.ExprAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAdd([NotNull] PatterParser.ExprAddContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprRl</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprRl([NotNull] PatterParser.ExprRlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprRl</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprRl([NotNull] PatterParser.ExprRlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCmp</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCmp([NotNull] PatterParser.ExprCmpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCmp</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCmp([NotNull] PatterParser.ExprCmpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAnd([NotNull] PatterParser.ExprAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAnd([NotNull] PatterParser.ExprAndContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprOr([NotNull] PatterParser.ExprOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprOr([NotNull] PatterParser.ExprOrContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTernar</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTernar([NotNull] PatterParser.ExprTernarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTernar</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTernar([NotNull] PatterParser.ExprTernarContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAss</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAss([NotNull] PatterParser.ExprAssContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAss</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAss([NotNull] PatterParser.ExprAssContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>primaryWrapped</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryWrapped([NotNull] PatterParser.PrimaryWrappedContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>primaryWrapped</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryWrapped([NotNull] PatterParser.PrimaryWrappedContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>primaryValues</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryValues([NotNull] PatterParser.PrimaryValuesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>primaryValues</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryValues([NotNull] PatterParser.PrimaryValuesContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>integerVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerVal([NotNull] PatterParser.IntegerValContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>integerVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerVal([NotNull] PatterParser.IntegerValContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>floatVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatVal([NotNull] PatterParser.FloatValContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>floatVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatVal([NotNull] PatterParser.FloatValContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>booleanVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanVal([NotNull] PatterParser.BooleanValContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanVal([NotNull] PatterParser.BooleanValContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stringVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringVal([NotNull] PatterParser.StringValContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringVal([NotNull] PatterParser.StringValContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>identity</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentity([NotNull] PatterParser.IdentityContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identity</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentity([NotNull] PatterParser.IdentityContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] PatterParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] PatterParser.ProgContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat([NotNull] PatterParser.StatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat([NotNull] PatterParser.StatContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.decleration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecleration([NotNull] PatterParser.DeclerationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.decleration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecleration([NotNull] PatterParser.DeclerationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDtype([NotNull] PatterParser.DtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDtype([NotNull] PatterParser.DtypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead([NotNull] PatterParser.ReadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead([NotNull] PatterParser.ReadContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.write"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite([NotNull] PatterParser.WriteContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.write"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite([NotNull] PatterParser.WriteContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.statwrap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatwrap([NotNull] PatterParser.StatwrapContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.statwrap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatwrap([NotNull] PatterParser.StatwrapContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf([NotNull] PatterParser.IfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf([NotNull] PatterParser.IfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile([NotNull] PatterParser.WhileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile([NotNull] PatterParser.WhileContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor([NotNull] PatterParser.ForContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor([NotNull] PatterParser.ForContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] PatterParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] PatterParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary([NotNull] PatterParser.PrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary([NotNull] PatterParser.PrimaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="PatterParser.statstatstatstatstatstatstatstatstatdtypedtypedtypedtypeexprexprexprexprexprexprexprexprexprexprexprprimaryprimaryvaluesvaluesvaluesvaluesvalues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValues([NotNull] PatterParser.ValuesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="PatterParser.statstatstatstatstatstatstatstatstatdtypedtypedtypedtypeexprexprexprexprexprexprexprexprexprexprexprprimaryprimaryvaluesvaluesvaluesvaluesvalues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValues([NotNull] PatterParser.ValuesContext context);
}
} // namespace Compiler
