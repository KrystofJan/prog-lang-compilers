//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/school/pjp/project/PLC_Lab7/Compiler/Patter.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PatterParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ID=17, 
		INT=18, BOOL=19, FLOAT=20, STRING=21, WS=22, COMMENT=23, ASSIGN=24, UN_MIN=25, 
		NEG_OP=26, CMP_LT=27, CMP_GT=28, ADD_OP=29, MIN_OP=30, CONCAT_OP=31, MUL_OP=32, 
		DIV_OP=33, MOD_OP=34, LOG_OR=35, LOG_AND=36, EQ=37, NEQ=38, QUES=39, COLON=40;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_decleration = 2, RULE_dtype = 3, RULE_read = 4, 
		RULE_write = 5, RULE_statwrap = 6, RULE_if = 7, RULE_while = 8, RULE_for = 9, 
		RULE_expr = 10, RULE_primary = 11, RULE_values = 12;
	public static readonly string[] ruleNames = {
		"prog", "stat", "decleration", "dtype", "read", "write", "statwrap", "if", 
		"while", "for", "expr", "primary", "values"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'int'", "'float'", "'bool'", "'string'", "'read'", 
		"'write'", "'{'", "'}'", "'if'", "'else'", "'while'", "'for'", "'('", 
		"')'", null, null, null, null, null, null, null, "'='", null, "'!'", "'<'", 
		"'>'", "'+'", null, "'.'", "'*'", "'/'", "'%'", "'||'", "'&&'", "'=='", 
		"'!='", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ID", "INT", "BOOL", "FLOAT", "STRING", 
		"WS", "COMMENT", "ASSIGN", "UN_MIN", "NEG_OP", "CMP_LT", "CMP_GT", "ADD_OP", 
		"MIN_OP", "CONCAT_OP", "MUL_OP", "DIV_OP", "MOD_OP", "LOG_OR", "LOG_AND", 
		"EQ", "NEQ", "QUES", "COLON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Patter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PatterParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 26; stat();
				}
				}
				State = 29;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING) | (1L << UN_MIN) | (1L << NEG_OP))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SemContext : StatContext {
		public SemContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterSem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitSem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclContext : StatContext {
		public DeclerationContext decleration() {
			return GetRuleContext<DeclerationContext>(0);
		}
		public DeclContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpContext : StatContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RdContext : StatContext {
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public RdContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterRd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitRd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WrContext : StatContext {
		public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public WrContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterWr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitWr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopedContext : StatContext {
		public StatwrapContext statwrap() {
			return GetRuleContext<StatwrapContext>(0);
		}
		public ScopedContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterScoped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitScoped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScoped(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstatContext : StatContext {
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public IfstatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterIfstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitIfstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhilecycContext : StatContext {
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public WhilecycContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterWhilecyc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitWhilecyc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilecyc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForcycContext : StatContext {
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public ForcycContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterForcyc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitForcyc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForcyc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 48;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				_localctx = new SemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; Match(T__0);
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
				_localctx = new DeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; decleration();
				State = 33; Match(T__0);
				}
				break;
			case T__14:
			case ID:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
			case UN_MIN:
			case NEG_OP:
				_localctx = new ExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; expr(0);
				State = 36; Match(T__0);
				}
				break;
			case T__6:
				_localctx = new RdContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 38; read();
				State = 39; Match(T__0);
				}
				break;
			case T__7:
				_localctx = new WrContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 41; write();
				State = 42; Match(T__0);
				}
				break;
			case T__8:
				_localctx = new ScopedContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 44; statwrap();
				}
				break;
			case T__10:
				_localctx = new IfstatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 45; @if();
				}
				break;
			case T__12:
				_localctx = new WhilecycContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 46; @while();
				}
				break;
			case T__13:
				_localctx = new ForcycContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 47; @for();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclerationContext : ParserRuleContext {
		public DtypeContext dtype() {
			return GetRuleContext<DtypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(PatterParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PatterParser.ID, i);
		}
		public DeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decleration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterDecleration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitDecleration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclerationContext decleration() {
		DeclerationContext _localctx = new DeclerationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_decleration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; dtype();
			State = 51; Match(ID);
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 52; Match(T__1);
				State = 53; Match(ID);
				}
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtypeContext : ParserRuleContext {
		public DtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtype; } }
	 
		public DtypeContext() { }
		public virtual void CopyFrom(DtypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDtypeContext : DtypeContext {
		public IntDtypeContext(DtypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterIntDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitIntDtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDtype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FltDtypeContext : DtypeContext {
		public FltDtypeContext(DtypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterFltDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitFltDtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFltDtype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BolDtypeContext : DtypeContext {
		public BolDtypeContext(DtypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterBolDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitBolDtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBolDtype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrDtypeContext : DtypeContext {
		public StrDtypeContext(DtypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterStrDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitStrDtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrDtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DtypeContext dtype() {
		DtypeContext _localctx = new DtypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_dtype);
		try {
			State = 63;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__2:
				_localctx = new IntDtypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; Match(T__2);
				}
				break;
			case T__3:
				_localctx = new FltDtypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(T__3);
				}
				break;
			case T__4:
				_localctx = new BolDtypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 61; Match(T__4);
				}
				break;
			case T__5:
				_localctx = new StrDtypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 62; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(PatterParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PatterParser.ID, i);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_read);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__6);
			State = 66; Match(ID);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 67; Match(T__1);
				State = 68; Match(ID);
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_write);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__7);
			State = 75; expr(0);
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 76; Match(T__1);
				State = 77; expr(0);
				}
				}
				State = 82;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatwrapContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public StatwrapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statwrap; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterStatwrap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitStatwrap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatwrap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatwrapContext statwrap() {
		StatwrapContext _localctx = new StatwrapContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statwrap);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(T__8);
			State = 84; stat();
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING) | (1L << UN_MIN) | (1L << NEG_OP))) != 0)) {
				{
				{
				State = 85; stat();
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 91; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__10);
			State = 94; expr(0);
			State = 95; stat();
			State = 98;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 96; Match(T__11);
				State = 97; stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__12);
			State = 101; expr(0);
			State = 102; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__13);
			State = 105; Match(T__14);
			State = 106; expr(0);
			State = 107; Match(T__0);
			State = 108; expr(0);
			State = 109; Match(T__0);
			State = 110; expr(0);
			State = 111; Match(T__15);
			State = 112; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPrimaryContext : ExprContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprPrimaryContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinContext : ExprContext {
		public ITerminalNode UN_MIN() { return GetToken(PatterParser.UN_MIN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterUnaryMin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitUnaryMin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNegContext : ExprContext {
		public ITerminalNode NEG_OP() { return GetToken(PatterParser.NEG_OP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryNegContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterUnaryNeg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitUnaryNeg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMulContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL_OP() { return GetToken(PatterParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(PatterParser.DIV_OP, 0); }
		public ITerminalNode MOD_OP() { return GetToken(PatterParser.MOD_OP, 0); }
		public ExprMulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAddContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD_OP() { return GetToken(PatterParser.ADD_OP, 0); }
		public ITerminalNode MIN_OP() { return GetToken(PatterParser.MIN_OP, 0); }
		public ITerminalNode CONCAT_OP() { return GetToken(PatterParser.CONCAT_OP, 0); }
		public ExprAddContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprRlContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CMP_LT() { return GetToken(PatterParser.CMP_LT, 0); }
		public ITerminalNode CMP_GT() { return GetToken(PatterParser.CMP_GT, 0); }
		public ExprRlContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprRl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprRl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprRl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCmpContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(PatterParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PatterParser.NEQ, 0); }
		public ExprCmpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprCmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprCmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOG_AND() { return GetToken(PatterParser.LOG_AND, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOG_OR() { return GetToken(PatterParser.LOG_OR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTernarContext : ExprContext {
		public ExprContext cond;
		public IToken op;
		public ExprContext tb;
		public ExprContext fb;
		public ITerminalNode COLON() { return GetToken(PatterParser.COLON, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode QUES() { return GetToken(PatterParser.QUES, 0); }
		public ExprTernarContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprTernar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprTernar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTernar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAssContext : ExprContext {
		public IToken op;
		public ITerminalNode ID() { return GetToken(PatterParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(PatterParser.ASSIGN, 0); }
		public ExprAssContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterExprAss(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitExprAss(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				_localctx = new ExprPrimaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 115; primary();
				State = 119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 116; expr(0);
						}
						} 
					}
					State = 121;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
				}
				}
				break;

			case 2:
				{
				_localctx = new UnaryMinContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 122; Match(UN_MIN);
				State = 123; expr(10);
				}
				break;

			case 3:
				{
				_localctx = new UnaryNegContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 124; Match(NEG_OP);
				State = 125; expr(9);
				}
				break;

			case 4:
				{
				_localctx = new ExprAssContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 126; Match(ID);
				State = 127; ((ExprAssContext)_localctx).op = Match(ASSIGN);
				State = 128; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 157;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 155;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new ExprMulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 131;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 132;
						((ExprMulContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL_OP) | (1L << DIV_OP) | (1L << MOD_OP))) != 0)) ) {
							((ExprMulContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 133; expr(9);
						}
						break;

					case 2:
						{
						_localctx = new ExprAddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 134;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 135;
						((ExprAddContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << MIN_OP) | (1L << CONCAT_OP))) != 0)) ) {
							((ExprAddContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 136; expr(8);
						}
						break;

					case 3:
						{
						_localctx = new ExprRlContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 137;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 138;
						((ExprRlContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==CMP_LT || _la==CMP_GT) ) {
							((ExprRlContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 139; expr(7);
						}
						break;

					case 4:
						{
						_localctx = new ExprCmpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 140;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 141;
						((ExprCmpContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((ExprCmpContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 142; expr(6);
						}
						break;

					case 5:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 143;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 144; ((ExprAndContext)_localctx).op = Match(LOG_AND);
						State = 145; expr(5);
						}
						break;

					case 6:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 146;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 147; ((ExprOrContext)_localctx).op = Match(LOG_OR);
						State = 148; expr(4);
						}
						break;

					case 7:
						{
						_localctx = new ExprTernarContext(new ExprContext(_parentctx, _parentState));
						((ExprTernarContext)_localctx).cond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 149;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 150; ((ExprTernarContext)_localctx).op = Match(QUES);
						State = 151; ((ExprTernarContext)_localctx).tb = expr(0);
						State = 152; Match(COLON);
						State = 153; ((ExprTernarContext)_localctx).fb = expr(2);
						}
						break;
					}
					} 
				}
				State = 159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryWrappedContext : PrimaryContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrimaryWrappedContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterPrimaryWrapped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitPrimaryWrapped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryWrapped(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryValuesContext : PrimaryContext {
		public ValuesContext values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public PrimaryValuesContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterPrimaryValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitPrimaryValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_primary);
		try {
			State = 165;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__14:
				_localctx = new PrimaryWrappedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; Match(T__14);
				State = 161; expr(0);
				State = 162; Match(T__15);
				}
				break;
			case ID:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
				_localctx = new PrimaryValuesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; values();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
	 
		public ValuesContext() { }
		public virtual void CopyFrom(ValuesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerValContext : ValuesContext {
		public ITerminalNode INT() { return GetToken(PatterParser.INT, 0); }
		public IntegerValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterIntegerVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitIntegerVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValContext : ValuesContext {
		public ITerminalNode FLOAT() { return GetToken(PatterParser.FLOAT, 0); }
		public FloatValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterFloatVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitFloatVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanValContext : ValuesContext {
		public ITerminalNode BOOL() { return GetToken(PatterParser.BOOL, 0); }
		public BooleanValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterBooleanVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitBooleanVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValContext : ValuesContext {
		public ITerminalNode STRING() { return GetToken(PatterParser.STRING, 0); }
		public StringValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterStringVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitStringVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentityContext : ValuesContext {
		public ITerminalNode ID() { return GetToken(PatterParser.ID, 0); }
		public IdentityContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.EnterIdentity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPatterListener typedListener = listener as IPatterListener;
			if (typedListener != null) typedListener.ExitIdentity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPatterVisitor<TResult> typedVisitor = visitor as IPatterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext values() {
		ValuesContext _localctx = new ValuesContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_values);
		try {
			State = 172;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				_localctx = new IntegerValContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatValContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; Match(FLOAT);
				}
				break;
			case BOOL:
				_localctx = new BooleanValContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 169; Match(BOOL);
				}
				break;
			case STRING:
				_localctx = new StringValContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 170; Match(STRING);
				}
				break;
			case ID:
				_localctx = new IdentityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 171; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3*\xB1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x6\x2\x1E\n\x2"+
		"\r\x2\xE\x2\x1F\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x33\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\a\x4\x39\n\x4\f\x4\xE\x4<\v\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\x42\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6H\n\x6\f\x6\xE\x6K\v\x6"+
		"\x3\a\x3\a\x3\a\x3\a\a\aQ\n\a\f\a\xE\aT\v\a\x3\b\x3\b\x3\b\a\bY\n\b\f"+
		"\b\xE\b\\\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x65\n\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\a\fx\n\f\f\f\xE\f{\v\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f"+
		"\x84\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x9E\n\f"+
		"\f\f\xE\f\xA1\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA8\n\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\xAF\n\xE\x3\xE\x2\x2\x3\x16\xF\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x2\x6"+
		"\x3\x2\"$\x3\x2\x1F!\x3\x2\x1D\x1E\x3\x2\'(\xC4\x2\x1D\x3\x2\x2\x2\x4"+
		"\x32\x3\x2\x2\x2\x6\x34\x3\x2\x2\x2\b\x41\x3\x2\x2\x2\n\x43\x3\x2\x2\x2"+
		"\fL\x3\x2\x2\x2\xEU\x3\x2\x2\x2\x10_\x3\x2\x2\x2\x12\x66\x3\x2\x2\x2\x14"+
		"j\x3\x2\x2\x2\x16\x83\x3\x2\x2\x2\x18\xA7\x3\x2\x2\x2\x1A\xAE\x3\x2\x2"+
		"\x2\x1C\x1E\x5\x4\x3\x2\x1D\x1C\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\x1D"+
		"\x3\x2\x2\x2\x1F \x3\x2\x2\x2 \x3\x3\x2\x2\x2!\x33\a\x3\x2\x2\"#\x5\x6"+
		"\x4\x2#$\a\x3\x2\x2$\x33\x3\x2\x2\x2%&\x5\x16\f\x2&\'\a\x3\x2\x2\'\x33"+
		"\x3\x2\x2\x2()\x5\n\x6\x2)*\a\x3\x2\x2*\x33\x3\x2\x2\x2+,\x5\f\a\x2,-"+
		"\a\x3\x2\x2-\x33\x3\x2\x2\x2.\x33\x5\xE\b\x2/\x33\x5\x10\t\x2\x30\x33"+
		"\x5\x12\n\x2\x31\x33\x5\x14\v\x2\x32!\x3\x2\x2\x2\x32\"\x3\x2\x2\x2\x32"+
		"%\x3\x2\x2\x2\x32(\x3\x2\x2\x2\x32+\x3\x2\x2\x2\x32.\x3\x2\x2\x2\x32/"+
		"\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x5\x3\x2\x2\x2"+
		"\x34\x35\x5\b\x5\x2\x35:\a\x13\x2\x2\x36\x37\a\x4\x2\x2\x37\x39\a\x13"+
		"\x2\x2\x38\x36\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2"+
		"\x2;\a\x3\x2\x2\x2<:\x3\x2\x2\x2=\x42\a\x5\x2\x2>\x42\a\x6\x2\x2?\x42"+
		"\a\a\x2\x2@\x42\a\b\x2\x2\x41=\x3\x2\x2\x2\x41>\x3\x2\x2\x2\x41?\x3\x2"+
		"\x2\x2\x41@\x3\x2\x2\x2\x42\t\x3\x2\x2\x2\x43\x44\a\t\x2\x2\x44I\a\x13"+
		"\x2\x2\x45\x46\a\x4\x2\x2\x46H\a\x13\x2\x2G\x45\x3\x2\x2\x2HK\x3\x2\x2"+
		"\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2J\v\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a\n\x2"+
		"\x2MR\x5\x16\f\x2NO\a\x4\x2\x2OQ\x5\x16\f\x2PN\x3\x2\x2\x2QT\x3\x2\x2"+
		"\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2S\r\x3\x2\x2\x2TR\x3\x2\x2\x2UV\a\v\x2"+
		"\x2VZ\x5\x4\x3\x2WY\x5\x4\x3\x2XW\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2"+
		"\x2Z[\x3\x2\x2\x2[]\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\a\f\x2\x2^\xF\x3\x2\x2"+
		"\x2_`\a\r\x2\x2`\x61\x5\x16\f\x2\x61\x64\x5\x4\x3\x2\x62\x63\a\xE\x2\x2"+
		"\x63\x65\x5\x4\x3\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x11\x3"+
		"\x2\x2\x2\x66g\a\xF\x2\x2gh\x5\x16\f\x2hi\x5\x4\x3\x2i\x13\x3\x2\x2\x2"+
		"jk\a\x10\x2\x2kl\a\x11\x2\x2lm\x5\x16\f\x2mn\a\x3\x2\x2no\x5\x16\f\x2"+
		"op\a\x3\x2\x2pq\x5\x16\f\x2qr\a\x12\x2\x2rs\x5\x4\x3\x2s\x15\x3\x2\x2"+
		"\x2tu\b\f\x1\x2uy\x5\x18\r\x2vx\x5\x16\f\x2wv\x3\x2\x2\x2x{\x3\x2\x2\x2"+
		"yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\x84\x3\x2\x2\x2{y\x3\x2\x2\x2|}\a\x1B\x2"+
		"\x2}\x84\x5\x16\f\f~\x7F\a\x1C\x2\x2\x7F\x84\x5\x16\f\v\x80\x81\a\x13"+
		"\x2\x2\x81\x82\a\x1A\x2\x2\x82\x84\x5\x16\f\x3\x83t\x3\x2\x2\x2\x83|\x3"+
		"\x2\x2\x2\x83~\x3\x2\x2\x2\x83\x80\x3\x2\x2\x2\x84\x9F\x3\x2\x2\x2\x85"+
		"\x86\f\n\x2\x2\x86\x87\t\x2\x2\x2\x87\x9E\x5\x16\f\v\x88\x89\f\t\x2\x2"+
		"\x89\x8A\t\x3\x2\x2\x8A\x9E\x5\x16\f\n\x8B\x8C\f\b\x2\x2\x8C\x8D\t\x4"+
		"\x2\x2\x8D\x9E\x5\x16\f\t\x8E\x8F\f\a\x2\x2\x8F\x90\t\x5\x2\x2\x90\x9E"+
		"\x5\x16\f\b\x91\x92\f\x6\x2\x2\x92\x93\a&\x2\x2\x93\x9E\x5\x16\f\a\x94"+
		"\x95\f\x5\x2\x2\x95\x96\a%\x2\x2\x96\x9E\x5\x16\f\x6\x97\x98\f\x4\x2\x2"+
		"\x98\x99\a)\x2\x2\x99\x9A\x5\x16\f\x2\x9A\x9B\a*\x2\x2\x9B\x9C\x5\x16"+
		"\f\x4\x9C\x9E\x3\x2\x2\x2\x9D\x85\x3\x2\x2\x2\x9D\x88\x3\x2\x2\x2\x9D"+
		"\x8B\x3\x2\x2\x2\x9D\x8E\x3\x2\x2\x2\x9D\x91\x3\x2\x2\x2\x9D\x94\x3\x2"+
		"\x2\x2\x9D\x97\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F"+
		"\xA0\x3\x2\x2\x2\xA0\x17\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA3\a\x11"+
		"\x2\x2\xA3\xA4\x5\x16\f\x2\xA4\xA5\a\x12\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6"+
		"\xA8\x5\x1A\xE\x2\xA7\xA2\x3\x2\x2\x2\xA7\xA6\x3\x2\x2\x2\xA8\x19\x3\x2"+
		"\x2\x2\xA9\xAF\a\x14\x2\x2\xAA\xAF\a\x16\x2\x2\xAB\xAF\a\x15\x2\x2\xAC"+
		"\xAF\a\x17\x2\x2\xAD\xAF\a\x13\x2\x2\xAE\xA9\x3\x2\x2\x2\xAE\xAA\x3\x2"+
		"\x2\x2\xAE\xAB\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAD\x3\x2\x2\x2\xAF"+
		"\x1B\x3\x2\x2\x2\x10\x1F\x32:\x41IRZ\x64y\x83\x9D\x9F\xA7\xAE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compiler
