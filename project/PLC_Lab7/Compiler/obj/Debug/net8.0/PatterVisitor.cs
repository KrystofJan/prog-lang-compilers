//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/school/pjp/project/PLC_Lab7/Compiler/Patter.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="PatterParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IPatterVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>sem</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSem([NotNull] PatterParser.SemContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>decl</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecl([NotNull] PatterParser.DeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExp([NotNull] PatterParser.ExpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>rd</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRd([NotNull] PatterParser.RdContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>wr</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWr([NotNull] PatterParser.WrContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>scoped</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScoped([NotNull] PatterParser.ScopedContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ifstat</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfstat([NotNull] PatterParser.IfstatContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>whilecyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhilecyc([NotNull] PatterParser.WhilecycContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>forcyc</c>
	/// labeled alternative in <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForcyc([NotNull] PatterParser.ForcycContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>intDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntDtype([NotNull] PatterParser.IntDtypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>fltDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFltDtype([NotNull] PatterParser.FltDtypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>bolDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBolDtype([NotNull] PatterParser.BolDtypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>strDtype</c>
	/// labeled alternative in <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrDtype([NotNull] PatterParser.StrDtypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprPrimary</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprPrimary([NotNull] PatterParser.ExprPrimaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>unaryMin</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMin([NotNull] PatterParser.UnaryMinContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>unaryNeg</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryNeg([NotNull] PatterParser.UnaryNegContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprMul([NotNull] PatterParser.ExprMulContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAdd([NotNull] PatterParser.ExprAddContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprRl</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprRl([NotNull] PatterParser.ExprRlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprCmp</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprCmp([NotNull] PatterParser.ExprCmpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAnd([NotNull] PatterParser.ExprAndContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprOr([NotNull] PatterParser.ExprOrContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprTernar</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTernar([NotNull] PatterParser.ExprTernarContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprAss</c>
	/// labeled alternative in <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAss([NotNull] PatterParser.ExprAssContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>primaryWrapped</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryWrapped([NotNull] PatterParser.PrimaryWrappedContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>primaryValues</c>
	/// labeled alternative in <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryValues([NotNull] PatterParser.PrimaryValuesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>integerVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerVal([NotNull] PatterParser.IntegerValContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>floatVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatVal([NotNull] PatterParser.FloatValContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>booleanVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanVal([NotNull] PatterParser.BooleanValContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stringVal</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringVal([NotNull] PatterParser.StringValContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>identity</c>
	/// labeled alternative in <see cref="PatterParser.values"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentity([NotNull] PatterParser.IdentityContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProg([NotNull] PatterParser.ProgContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat([NotNull] PatterParser.StatContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.decleration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecleration([NotNull] PatterParser.DeclerationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.dtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDtype([NotNull] PatterParser.DtypeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRead([NotNull] PatterParser.ReadContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.write"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWrite([NotNull] PatterParser.WriteContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.statwrap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatwrap([NotNull] PatterParser.StatwrapContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf([NotNull] PatterParser.IfContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhile([NotNull] PatterParser.WhileContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFor([NotNull] PatterParser.ForContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] PatterParser.ExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="PatterParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimary([NotNull] PatterParser.PrimaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="PatterParser.statstatstatstatstatstatstatstatstatdtypedtypedtypedtypeexprexprexprexprexprexprexprexprexprexprexprprimaryprimaryvaluesvaluesvaluesvaluesvalues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValues([NotNull] PatterParser.ValuesContext context);
}
} // namespace Compiler
