//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/school/pjp/project/PLC_Lab7/PLC_Lab7/PLC_Lab7_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab7 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab7_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ID=17, 
		INT=18, BOOL=19, FLOAT=20, STRING=21, WS=22, ASSIGN=23, UN_MIN=24, NEG_OP=25, 
		BIN_AR_MUL=26, BIN_AR_ADD=27, LOG_OR=28, LOG_AND=29, CMP=30, REL=31;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_types = 2, RULE_dtype = 3, RULE_read = 4, 
		RULE_write = 5, RULE_statwrap = 6, RULE_if = 7, RULE_cond = 8, RULE_while = 9, 
		RULE_for = 10, RULE_expr = 11, RULE_unary = 12, RULE_assignment = 13, 
		RULE_values = 14, RULE_operation = 15, RULE_operator = 16;
	public static readonly string[] ruleNames = {
		"prog", "stat", "types", "dtype", "read", "write", "statwrap", "if", "cond", 
		"while", "for", "expr", "unary", "assignment", "values", "operation", 
		"operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'int'", "'float'", "'bool'", "'string'", "'read'", 
		"'write'", "'{'", "'}'", "'if'", "'else'", "'('", "')'", "'while'", "'for'", 
		null, null, null, null, null, null, "'='", "'-'", "'!'", null, null, "'||'", 
		"'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ID", "INT", "BOOL", "FLOAT", "STRING", 
		"WS", "ASSIGN", "UN_MIN", "NEG_OP", "BIN_AR_MUL", "BIN_AR_ADD", "LOG_OR", 
		"LOG_AND", "CMP", "REL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab7_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab7_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 34; stat();
				}
				}
				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING) | (1L << UN_MIN) | (1L << NEG_OP))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public StatwrapContext statwrap() {
			return GetRuleContext<StatwrapContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 56;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; Match(T__0);
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; types();
				State = 41; Match(T__0);
				}
				break;
			case T__12:
			case ID:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
			case UN_MIN:
			case NEG_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 43; expr();
				State = 44; Match(T__0);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46; read();
				State = 47; Match(T__0);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 49; write();
				State = 50; Match(T__0);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 52; statwrap();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 7);
				{
				State = 53; @if();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 8);
				{
				State = 54; @while();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 9);
				{
				State = 55; @for();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		public DtypeContext dtype() {
			return GetRuleContext<DtypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; dtype();
			State = 59; Match(ID);
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 60; Match(T__1);
				State = 61; Match(ID);
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtypeContext : ParserRuleContext {
		public DtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitDtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DtypeContext dtype() {
		DtypeContext _localctx = new DtypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_dtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_read);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__6);
			State = 70; Match(ID);
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 71; Match(T__1);
				State = 72; Match(ID);
				}
				}
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_write);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(T__7);
			State = 79; expr();
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 80; Match(T__1);
				State = 81; expr();
				}
				}
				State = 86;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatwrapContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public StatwrapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statwrap; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterStatwrap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitStatwrap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatwrap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatwrapContext statwrap() {
		StatwrapContext _localctx = new StatwrapContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statwrap);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(T__8);
			State = 88; stat();
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING) | (1L << UN_MIN) | (1L << NEG_OP))) != 0)) {
				{
				{
				State = 89; stat();
				}
				}
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 95; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(T__10);
			State = 98; cond();
			State = 99; stat();
			State = 102;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 100; Match(T__11);
				State = 101; stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_cond);
		try {
			State = 109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(T__12);
				State = 105; expr();
				State = 106; Match(T__13);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(T__14);
			State = 112; cond();
			State = 113; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__15);
			State = 116; Match(T__12);
			State = 117; expr();
			State = 118; Match(T__0);
			State = 119; cond();
			State = 120; Match(T__0);
			State = 121; expr();
			State = 122; Match(T__13);
			State = 123; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathContext : ExprContext {
		public ValuesContext values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public MathContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssContext : ExprContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterAss(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitAss(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnarContext : ExprContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public UnarContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterUnar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitUnar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprWrapContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprWrapContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterExprWrap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitExprWrap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprWrap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_expr);
		int _la;
		try {
			State = 135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				_localctx = new MathContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; values();
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_AR_MUL) | (1L << BIN_AR_ADD) | (1L << LOG_OR) | (1L << LOG_AND) | (1L << CMP) | (1L << REL))) != 0)) {
					{
					State = 126; operation();
					}
				}

				}
				break;

			case 2:
				_localctx = new AssContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; assignment();
				}
				break;

			case 3:
				_localctx = new UnarContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; unary();
				}
				break;

			case 4:
				_localctx = new ExprWrapContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; Match(T__12);
				State = 132; expr();
				State = 133; Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public ITerminalNode NEG_OP() { return GetToken(PLC_Lab7_exprParser.NEG_OP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode UN_MIN() { return GetToken(PLC_Lab7_exprParser.UN_MIN, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_unary);
		try {
			State = 141;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEG_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; Match(NEG_OP);
				State = 138; expr();
				}
				break;
			case UN_MIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(UN_MIN);
				State = 140; expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PLC_Lab7_exprParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PLC_Lab7_exprParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode UN_MIN() { return GetToken(PLC_Lab7_exprParser.UN_MIN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(ID);
			State = 144; Match(ASSIGN);
			State = 146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 145; Match(UN_MIN);
				}
				break;
			}
			State = 148; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
	 
		public ValuesContext() { }
		public virtual void CopyFrom(ValuesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentityContext : ValuesContext {
		public ITerminalNode ID() { return GetToken(PLC_Lab7_exprParser.ID, 0); }
		public IdentityContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterIdentity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitIdentity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerValContext : ValuesContext {
		public ITerminalNode INT() { return GetToken(PLC_Lab7_exprParser.INT, 0); }
		public IntegerValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterIntegerVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitIntegerVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValContext : ValuesContext {
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab7_exprParser.FLOAT, 0); }
		public FloatValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterFloatVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitFloatVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanValContext : ValuesContext {
		public ITerminalNode BOOL() { return GetToken(PLC_Lab7_exprParser.BOOL, 0); }
		public BooleanValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterBooleanVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitBooleanVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValContext : ValuesContext {
		public ITerminalNode STRING() { return GetToken(PLC_Lab7_exprParser.STRING, 0); }
		public StringValContext(ValuesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterStringVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitStringVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext values() {
		ValuesContext _localctx = new ValuesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_values);
		try {
			State = 155;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				_localctx = new IdentityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; Match(ID);
				}
				break;
			case INT:
				_localctx = new IntegerValContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatValContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; Match(FLOAT);
				}
				break;
			case BOOL:
				_localctx = new BooleanValContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 153; Match(BOOL);
				}
				break;
			case STRING:
				_localctx = new StringValContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 154; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; @operator();
			State = 158; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode BIN_AR_ADD() { return GetToken(PLC_Lab7_exprParser.BIN_AR_ADD, 0); }
		public ITerminalNode BIN_AR_MUL() { return GetToken(PLC_Lab7_exprParser.BIN_AR_MUL, 0); }
		public ITerminalNode CMP() { return GetToken(PLC_Lab7_exprParser.CMP, 0); }
		public ITerminalNode REL() { return GetToken(PLC_Lab7_exprParser.REL, 0); }
		public ITerminalNode LOG_OR() { return GetToken(PLC_Lab7_exprParser.LOG_OR, 0); }
		public ITerminalNode LOG_AND() { return GetToken(PLC_Lab7_exprParser.LOG_AND, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_AR_MUL) | (1L << BIN_AR_ADD) | (1L << LOG_OR) | (1L << LOG_AND) | (1L << CMP) | (1L << REL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3!\xA5\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x6\x2&\n\x2\r\x2\xE\x2\'\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3;\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x41"+
		"\n\x4\f\x4\xE\x4\x44\v\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6L\n"+
		"\x6\f\x6\xE\x6O\v\x6\x3\a\x3\a\x3\a\x3\a\a\aU\n\a\f\a\xE\aX\v\a\x3\b\x3"+
		"\b\x3\b\a\b]\n\b\f\b\xE\b`\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t"+
		"i\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\np\n\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x5\r\x82\n\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\x8A\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x90"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x5\xF\x95\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x9E\n\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x12\x2\x2\x2\x13\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2\x2\x4\x3\x2\x5\b\x3"+
		"\x2\x1C!\xAC\x2%\x3\x2\x2\x2\x4:\x3\x2\x2\x2\x6<\x3\x2\x2\x2\b\x45\x3"+
		"\x2\x2\x2\nG\x3\x2\x2\x2\fP\x3\x2\x2\x2\xEY\x3\x2\x2\x2\x10\x63\x3\x2"+
		"\x2\x2\x12o\x3\x2\x2\x2\x14q\x3\x2\x2\x2\x16u\x3\x2\x2\x2\x18\x89\x3\x2"+
		"\x2\x2\x1A\x8F\x3\x2\x2\x2\x1C\x91\x3\x2\x2\x2\x1E\x9D\x3\x2\x2\x2 \x9F"+
		"\x3\x2\x2\x2\"\xA2\x3\x2\x2\x2$&\x5\x4\x3\x2%$\x3\x2\x2\x2&\'\x3\x2\x2"+
		"\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2(\x3\x3\x2\x2\x2);\a\x3\x2\x2*+\x5\x6"+
		"\x4\x2+,\a\x3\x2\x2,;\x3\x2\x2\x2-.\x5\x18\r\x2./\a\x3\x2\x2/;\x3\x2\x2"+
		"\x2\x30\x31\x5\n\x6\x2\x31\x32\a\x3\x2\x2\x32;\x3\x2\x2\x2\x33\x34\x5"+
		"\f\a\x2\x34\x35\a\x3\x2\x2\x35;\x3\x2\x2\x2\x36;\x5\xE\b\x2\x37;\x5\x10"+
		"\t\x2\x38;\x5\x14\v\x2\x39;\x5\x16\f\x2:)\x3\x2\x2\x2:*\x3\x2\x2\x2:-"+
		"\x3\x2\x2\x2:\x30\x3\x2\x2\x2:\x33\x3\x2\x2\x2:\x36\x3\x2\x2\x2:\x37\x3"+
		"\x2\x2\x2:\x38\x3\x2\x2\x2:\x39\x3\x2\x2\x2;\x5\x3\x2\x2\x2<=\x5\b\x5"+
		"\x2=\x42\a\x13\x2\x2>?\a\x4\x2\x2?\x41\a\x13\x2\x2@>\x3\x2\x2\x2\x41\x44"+
		"\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\a\x3\x2\x2\x2\x44"+
		"\x42\x3\x2\x2\x2\x45\x46\t\x2\x2\x2\x46\t\x3\x2\x2\x2GH\a\t\x2\x2HM\a"+
		"\x13\x2\x2IJ\a\x4\x2\x2JL\a\x13\x2\x2KI\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3"+
		"\x2\x2\x2MN\x3\x2\x2\x2N\v\x3\x2\x2\x2OM\x3\x2\x2\x2PQ\a\n\x2\x2QV\x5"+
		"\x18\r\x2RS\a\x4\x2\x2SU\x5\x18\r\x2TR\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3"+
		"\x2\x2\x2VW\x3\x2\x2\x2W\r\x3\x2\x2\x2XV\x3\x2\x2\x2YZ\a\v\x2\x2Z^\x5"+
		"\x4\x3\x2[]\x5\x4\x3\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2^_"+
		"\x3\x2\x2\x2_\x61\x3\x2\x2\x2`^\x3\x2\x2\x2\x61\x62\a\f\x2\x2\x62\xF\x3"+
		"\x2\x2\x2\x63\x64\a\r\x2\x2\x64\x65\x5\x12\n\x2\x65h\x5\x4\x3\x2\x66g"+
		"\a\xE\x2\x2gi\x5\x4\x3\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2i\x11\x3\x2\x2"+
		"\x2jk\a\xF\x2\x2kl\x5\x18\r\x2lm\a\x10\x2\x2mp\x3\x2\x2\x2np\x5\x18\r"+
		"\x2oj\x3\x2\x2\x2on\x3\x2\x2\x2p\x13\x3\x2\x2\x2qr\a\x11\x2\x2rs\x5\x12"+
		"\n\x2st\x5\x4\x3\x2t\x15\x3\x2\x2\x2uv\a\x12\x2\x2vw\a\xF\x2\x2wx\x5\x18"+
		"\r\x2xy\a\x3\x2\x2yz\x5\x12\n\x2z{\a\x3\x2\x2{|\x5\x18\r\x2|}\a\x10\x2"+
		"\x2}~\x5\x4\x3\x2~\x17\x3\x2\x2\x2\x7F\x81\x5\x1E\x10\x2\x80\x82\x5 \x11"+
		"\x2\x81\x80\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x8A\x3\x2\x2\x2\x83\x8A"+
		"\x5\x1C\xF\x2\x84\x8A\x5\x1A\xE\x2\x85\x86\a\xF\x2\x2\x86\x87\x5\x18\r"+
		"\x2\x87\x88\a\x10\x2\x2\x88\x8A\x3\x2\x2\x2\x89\x7F\x3\x2\x2\x2\x89\x83"+
		"\x3\x2\x2\x2\x89\x84\x3\x2\x2\x2\x89\x85\x3\x2\x2\x2\x8A\x19\x3\x2\x2"+
		"\x2\x8B\x8C\a\x1B\x2\x2\x8C\x90\x5\x18\r\x2\x8D\x8E\a\x1A\x2\x2\x8E\x90"+
		"\x5\x18\r\x2\x8F\x8B\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x1B\x3\x2\x2"+
		"\x2\x91\x92\a\x13\x2\x2\x92\x94\a\x19\x2\x2\x93\x95\a\x1A\x2\x2\x94\x93"+
		"\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x97\x5\x18\r"+
		"\x2\x97\x1D\x3\x2\x2\x2\x98\x9E\a\x13\x2\x2\x99\x9E\a\x14\x2\x2\x9A\x9E"+
		"\a\x16\x2\x2\x9B\x9E\a\x15\x2\x2\x9C\x9E\a\x17\x2\x2\x9D\x98\x3\x2\x2"+
		"\x2\x9D\x99\x3\x2\x2\x2\x9D\x9A\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9C"+
		"\x3\x2\x2\x2\x9E\x1F\x3\x2\x2\x2\x9F\xA0\x5\"\x12\x2\xA0\xA1\x5\x18\r"+
		"\x2\xA1!\x3\x2\x2\x2\xA2\xA3\t\x3\x2\x2\xA3#\x3\x2\x2\x2\xF\':\x42MV^"+
		"ho\x81\x89\x8F\x94\x9D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab7
