//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/zahry/Downloads/plc_lab/PLC_Lab7_solution/PLC_Lab7/PLC_Lab7/PLC_Lab7_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab7 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab7_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, ID=16, INT=17, 
		BOOL=18, FLOAT=19, STRING=20, WS=21, ASSIGN=22, UN_MIN=23, NEG_OP=24, 
		BIN_AR_MUL=25, BIN_AR_ADD=26, LOG_OR=27, LOG_AND=28, CMP=29, REL=30;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_types = 2, RULE_dtype = 3, RULE_read = 4, 
		RULE_write = 5, RULE_statwrap = 6, RULE_if = 7, RULE_cond = 8, RULE_while = 9, 
		RULE_expr = 10, RULE_unary = 11, RULE_assignment = 12, RULE_values = 13, 
		RULE_operation = 14, RULE_operator = 15;
	public static readonly string[] ruleNames = {
		"prog", "stat", "types", "dtype", "read", "write", "statwrap", "if", "cond", 
		"while", "expr", "unary", "assignment", "values", "operation", "operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'int'", "'float'", "'bool'", "'string'", "'read'", 
		"'write'", "'{'", "'}'", "'if'", "'else'", "'('", "')'", "'while'", null, 
		null, null, null, null, null, "'='", "'-'", "'!'", null, null, "'||'", 
		"'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "ID", "INT", "BOOL", "FLOAT", "STRING", "WS", 
		"ASSIGN", "UN_MIN", "NEG_OP", "BIN_AR_MUL", "BIN_AR_ADD", "LOG_OR", "LOG_AND", 
		"CMP", "REL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab7_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab7_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 32; stat();
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__12) | (1L << T__14) | (1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING) | (1L << UN_MIN) | (1L << NEG_OP))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public StatwrapContext statwrap() {
			return GetRuleContext<StatwrapContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 53;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; Match(T__0);
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; types();
				State = 39; Match(T__0);
				}
				break;
			case T__12:
			case ID:
			case INT:
			case BOOL:
			case FLOAT:
			case STRING:
			case UN_MIN:
			case NEG_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41; expr();
				State = 42; Match(T__0);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 44; read();
				State = 45; Match(T__0);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 47; write();
				State = 48; Match(T__0);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 50; statwrap();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 7);
				{
				State = 51; @if();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 8);
				{
				State = 52; @while();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		public DtypeContext dtype() {
			return GetRuleContext<DtypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; dtype();
			State = 56; Match(ID);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 57; Match(T__1);
				State = 58; Match(ID);
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtypeContext : ParserRuleContext {
		public DtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitDtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DtypeContext dtype() {
		DtypeContext _localctx = new DtypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_dtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_read);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(T__6);
			State = 67; Match(ID);
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 68; Match(T__1);
				State = 69; Match(ID);
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_write);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(T__7);
			State = 76; expr();
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 77; Match(T__1);
				State = 78; expr();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatwrapContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public StatwrapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statwrap; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterStatwrap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitStatwrap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatwrap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatwrapContext statwrap() {
		StatwrapContext _localctx = new StatwrapContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statwrap);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(T__8);
			State = 85; stat();
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__12) | (1L << T__14) | (1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING) | (1L << UN_MIN) | (1L << NEG_OP))) != 0)) {
				{
				{
				State = 86; stat();
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 92; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__10);
			State = 95; cond();
			State = 96; stat();
			State = 99;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 97; Match(T__11);
				State = 98; stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_cond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__12);
			State = 102; expr();
			State = 103; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(T__14);
			State = 106; cond();
			State = 107; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ValuesContext values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_expr);
		int _la;
		try {
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; values();
				State = 111;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_AR_MUL) | (1L << BIN_AR_ADD) | (1L << LOG_OR) | (1L << LOG_AND) | (1L << CMP) | (1L << REL))) != 0)) {
					{
					State = 110; operation();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; assignment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114; unary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115; Match(T__12);
				State = 116; expr();
				State = 117; Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public ITerminalNode NEG_OP() { return GetToken(PLC_Lab7_exprParser.NEG_OP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode UN_MIN() { return GetToken(PLC_Lab7_exprParser.UN_MIN, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_unary);
		try {
			State = 125;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEG_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(NEG_OP);
				State = 122; expr();
				}
				break;
			case UN_MIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(UN_MIN);
				State = 124; expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PLC_Lab7_exprParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PLC_Lab7_exprParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode UN_MIN() { return GetToken(PLC_Lab7_exprParser.UN_MIN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(ID);
			State = 128; Match(ASSIGN);
			State = 130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 129; Match(UN_MIN);
				}
				break;
			}
			State = 132; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PLC_Lab7_exprParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(PLC_Lab7_exprParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab7_exprParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(PLC_Lab7_exprParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(PLC_Lab7_exprParser.STRING, 0); }
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext values() {
		ValuesContext _localctx = new ValuesContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT) | (1L << BOOL) | (1L << FLOAT) | (1L << STRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; @operator();
			State = 137; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode BIN_AR_ADD() { return GetToken(PLC_Lab7_exprParser.BIN_AR_ADD, 0); }
		public ITerminalNode BIN_AR_MUL() { return GetToken(PLC_Lab7_exprParser.BIN_AR_MUL, 0); }
		public ITerminalNode CMP() { return GetToken(PLC_Lab7_exprParser.CMP, 0); }
		public ITerminalNode REL() { return GetToken(PLC_Lab7_exprParser.REL, 0); }
		public ITerminalNode LOG_OR() { return GetToken(PLC_Lab7_exprParser.LOG_OR, 0); }
		public ITerminalNode LOG_AND() { return GetToken(PLC_Lab7_exprParser.LOG_AND, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_AR_MUL) | (1L << BIN_AR_ADD) | (1L << LOG_OR) | (1L << LOG_AND) | (1L << CMP) | (1L << REL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \x90\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\x6\x2$\n\x2\r\x2\xE\x2%\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x38\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4>\n\x4\f\x4\xE\x4\x41\v"+
		"\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6I\n\x6\f\x6\xE\x6L\v\x6\x3"+
		"\a\x3\a\x3\a\x3\a\a\aR\n\a\f\a\xE\aU\v\a\x3\b\x3\b\x3\b\a\bZ\n\b\f\b\xE"+
		"\b]\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x66\n\t\x3\n\x3\n\x3\n"+
		"\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x5\fr\n\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x5\fz\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\x80\n\r\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\x85\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x2\x2\x2\x12\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\x2\x5\x3\x2\x5\b\x3"+
		"\x2\x12\x16\x3\x2\x1B \x92\x2#\x3\x2\x2\x2\x4\x37\x3\x2\x2\x2\x6\x39\x3"+
		"\x2\x2\x2\b\x42\x3\x2\x2\x2\n\x44\x3\x2\x2\x2\fM\x3\x2\x2\x2\xEV\x3\x2"+
		"\x2\x2\x10`\x3\x2\x2\x2\x12g\x3\x2\x2\x2\x14k\x3\x2\x2\x2\x16y\x3\x2\x2"+
		"\x2\x18\x7F\x3\x2\x2\x2\x1A\x81\x3\x2\x2\x2\x1C\x88\x3\x2\x2\x2\x1E\x8A"+
		"\x3\x2\x2\x2 \x8D\x3\x2\x2\x2\"$\x5\x4\x3\x2#\"\x3\x2\x2\x2$%\x3\x2\x2"+
		"\x2%#\x3\x2\x2\x2%&\x3\x2\x2\x2&\x3\x3\x2\x2\x2\'\x38\a\x3\x2\x2()\x5"+
		"\x6\x4\x2)*\a\x3\x2\x2*\x38\x3\x2\x2\x2+,\x5\x16\f\x2,-\a\x3\x2\x2-\x38"+
		"\x3\x2\x2\x2./\x5\n\x6\x2/\x30\a\x3\x2\x2\x30\x38\x3\x2\x2\x2\x31\x32"+
		"\x5\f\a\x2\x32\x33\a\x3\x2\x2\x33\x38\x3\x2\x2\x2\x34\x38\x5\xE\b\x2\x35"+
		"\x38\x5\x10\t\x2\x36\x38\x5\x14\v\x2\x37\'\x3\x2\x2\x2\x37(\x3\x2\x2\x2"+
		"\x37+\x3\x2\x2\x2\x37.\x3\x2\x2\x2\x37\x31\x3\x2\x2\x2\x37\x34\x3\x2\x2"+
		"\x2\x37\x35\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38\x5\x3\x2\x2\x2\x39:\x5"+
		"\b\x5\x2:?\a\x12\x2\x2;<\a\x4\x2\x2<>\a\x12\x2\x2=;\x3\x2\x2\x2>\x41\x3"+
		"\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\a\x3\x2\x2\x2\x41?\x3\x2\x2\x2"+
		"\x42\x43\t\x2\x2\x2\x43\t\x3\x2\x2\x2\x44\x45\a\t\x2\x2\x45J\a\x12\x2"+
		"\x2\x46G\a\x4\x2\x2GI\a\x12\x2\x2H\x46\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3"+
		"\x2\x2\x2JK\x3\x2\x2\x2K\v\x3\x2\x2\x2LJ\x3\x2\x2\x2MN\a\n\x2\x2NS\x5"+
		"\x16\f\x2OP\a\x4\x2\x2PR\x5\x16\f\x2QO\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3"+
		"\x2\x2\x2ST\x3\x2\x2\x2T\r\x3\x2\x2\x2US\x3\x2\x2\x2VW\a\v\x2\x2W[\x5"+
		"\x4\x3\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3"+
		"\x2\x2\x2\\^\x3\x2\x2\x2][\x3\x2\x2\x2^_\a\f\x2\x2_\xF\x3\x2\x2\x2`\x61"+
		"\a\r\x2\x2\x61\x62\x5\x12\n\x2\x62\x65\x5\x4\x3\x2\x63\x64\a\xE\x2\x2"+
		"\x64\x66\x5\x4\x3\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x11\x3"+
		"\x2\x2\x2gh\a\xF\x2\x2hi\x5\x16\f\x2ij\a\x10\x2\x2j\x13\x3\x2\x2\x2kl"+
		"\a\x11\x2\x2lm\x5\x12\n\x2mn\x5\x4\x3\x2n\x15\x3\x2\x2\x2oq\x5\x1C\xF"+
		"\x2pr\x5\x1E\x10\x2qp\x3\x2\x2\x2qr\x3\x2\x2\x2rz\x3\x2\x2\x2sz\x5\x1A"+
		"\xE\x2tz\x5\x18\r\x2uv\a\xF\x2\x2vw\x5\x16\f\x2wx\a\x10\x2\x2xz\x3\x2"+
		"\x2\x2yo\x3\x2\x2\x2ys\x3\x2\x2\x2yt\x3\x2\x2\x2yu\x3\x2\x2\x2z\x17\x3"+
		"\x2\x2\x2{|\a\x1A\x2\x2|\x80\x5\x16\f\x2}~\a\x19\x2\x2~\x80\x5\x16\f\x2"+
		"\x7F{\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x80\x19\x3\x2\x2\x2\x81\x82\a\x12\x2"+
		"\x2\x82\x84\a\x18\x2\x2\x83\x85\a\x19\x2\x2\x84\x83\x3\x2\x2\x2\x84\x85"+
		"\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\x5\x16\f\x2\x87\x1B\x3\x2\x2"+
		"\x2\x88\x89\t\x3\x2\x2\x89\x1D\x3\x2\x2\x2\x8A\x8B\x5 \x11\x2\x8B\x8C"+
		"\x5\x16\f\x2\x8C\x1F\x3\x2\x2\x2\x8D\x8E\t\x4\x2\x2\x8E!\x3\x2\x2\x2\r"+
		"%\x37?JS[\x65qy\x7F\x84";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab7
